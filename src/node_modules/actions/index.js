import axios from 'axios';
import R from 'ramda';
import {
    FETCH_PHONES_START,
    FETCH_PHONES_SUCCESS,
    FETCH_PHONES_FAILURE,
    LOAD_MORE_PHONES_START,
    LOAD_MORE_PHONES_SUCCESS,
    LOAD_MORE_PHONES_FAILURE,
    FETCH_PHONE_BY_ID_START,
    FETCH_PHONE_BY_ID_SUCCESS,
    FETCH_PHONE_BY_ID_FAILURE,
    ADD_PHONE_TO_BASKET,
    SEARCH_PHONE,
    FETCH_CATEGORIES_START,
    FETCH_CATEGORIES_SUCCESS,
    FETCH_CATEGORIES_FAILURE,
    REMOVE_PHONE_FROM_BASKET,
    CLEAN_BASKET,
    ADD_SORT_RULES,
    SENDING_EMAIL_START,
    SENDING_EMAIL_SUCCESS,
    SENDING_EMAIL_NUMBERFAILURE
} from 'actionTypes';
import {getRenderedPhonesLength} from 'selectors';
import {
    fetchPhones as fetchPhonesApi,
    loadMorePhones as loadMorePhonesApi,
    fetchPhoneById as fetchPhoneByIdApi,
    fetchCategories as fetchCategoriesApi
} from 'api';

export const fetchPhones  = () => async dispatch => {
    dispatch({type: FETCH_PHONES_START})

    try {
        const phones = await fetchPhonesApi()
        dispatch({
            type: FETCH_PHONES_SUCCESS,
            payload: phones
        })
    } catch (err) {
        dispatch({
            type: FETCH_PHONES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const loadMorePhones  = () => async (dispatch, getState) => {
    const offset = getRenderedPhonesLength(getState());
    dispatch({type: LOAD_MORE_PHONES_START})

    try {
        const phones = await loadMorePhonesApi({offset})
        dispatch({
            type: LOAD_MORE_PHONES_SUCCESS,
            payload: phones
        })
    } catch (err) {
        dispatch({
            type: LOAD_MORE_PHONES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const fetchPhoneById = id => async dispatch => {
    dispatch({type: FETCH_PHONE_BY_ID_START})

    try {
        const phone = await fetchPhoneByIdApi(id)
        dispatch({
            type: FETCH_PHONE_BY_ID_SUCCESS,
            payload: phone
        })
    } catch (err) {
        dispatch({
            type: FETCH_PHONE_BY_ID_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const addPhoneToBasket = id => dispatch => {
    dispatch({
        type: ADD_PHONE_TO_BASKET,
        payload: id
    })
}

export const searchPhone = text => dispatch => {
    dispatch({
        type: SEARCH_PHONE,
        payload: text
    })
}

export const fetchCategories = () => async dispatch => {
    dispatch({type: FETCH_CATEGORIES_START})

    try {
        const categories = await fetchCategoriesApi()
        dispatch({
            type: FETCH_CATEGORIES_SUCCESS,
            payload: categories
        })
    } catch (err) {
        dispatch({
            type: FETCH_CATEGORIES_FAILURE,
            payload: err,
            error: true
        })
    }
}

export const removePhoneFromBasket = id => async dispatch => {
    dispatch({
      type: REMOVE_PHONE_FROM_BASKET,
      payload: id
    })
}

export const cleanBasket = () => dispatch => {
    dispatch({
        type: CLEAN_BASKET
    })
}

export const basketCheckout = (phones, telNumber) => dispatch => {
    if (/^\d[\d\(\)\ -]{8}\d$/.test(telNumber)) {
        dispatch({
            type: SENDING_EMAIL_START,
            payload: 'true'
        })
        
        function transformToMail(items) {
            let list = [];
            let listt = {};
            items.map((item, index) => {
                return list[index] = R.props(['id', 'name', 'count'], item)
            })
            list = list.map(unit => {
                listt[unit[0]] = 'Имя товара: '+unit[1]+' | Код товара: '+unit[0]+' | Количество позиций: '+unit[2];
                return listt
            })
            return listt
        }
        let emailList = transformToMail(phones);
        axios.post('https://formspree.io/evgeniygilenok@gmail.com', {...emailList, telNumber})
        .then(function (response) {
            dispatch({
                type: SENDING_EMAIL_SUCCESS,
                payload: 'success'
            })
            dispatch({
                type: CLEAN_BASKET
            })
        })
        .catch(function (error) {
            console.log(error);
        });
    } else {
        dispatch({
            type: SENDING_EMAIL_NUMBERFAILURE,
            payload: 'numberFailure'
        })
    }
}

export const filterItems = (newRule) => dispatch => {
    dispatch({
        type: ADD_SORT_RULES,
        payload: newRule
    })
}